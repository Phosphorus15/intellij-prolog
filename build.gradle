buildscript {
    repositories {
        if (!System.getenv("CI")?.trim()) {
            maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        } else {
            mavenCentral()
        }
    }
    dependencies {
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.4.16"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-grammarkit-plugin:2021.1.3"
    }
}

plugins {
    id 'scala'
}

apply plugin: "org.jetbrains.intellij"
apply plugin: "org.jetbrains.grammarkit"

group 'tech.phosphorus'
version '0.1.2.3'

sourceCompatibility = 1.8

repositories {
    if (!System.getenv("CI")?.trim()) {
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/central/' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    } else {
        mavenCentral()
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(ScalaCompile) {
            scalaCompileOptions.deprecation = false
        }
    }
}

dependencies {
    compile group: 'org.eclipse.mylyn.github', name: 'org.eclipse.egit.github.core', version: '2.1.5'
    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

publishPlugin {
    Properties properties = new Properties()
    try {
        properties.load(new FileInputStream("gradle.properties"))
        token properties.getProperty("intellijPublishToken")
    } catch(IOException ignored) {
    }
}

// create your own .ijlocation if any alternatives should be suggested
static def findIntellijPath() {
    try {
        def workdir = System.getProperty("user.dir")
        if (workdir != null && Files.exists(Paths.get(workdir).resolve(".ijlocation"))) {
            return Files.readAllLines(Paths.get(workdir).resolve(".ijlocation"))[0].trim()
        } else {
            def user = System.getProperty("user.name")
            def apps = System.getProperty("os.name").startsWith("Windows")
                    ? "C:\\Users\\$user\\AppData\\Local\\JetBrains\\Toolbox\\apps"
                    : "/home/$user/.local/share/JetBrains/Toolbox/apps"
            if (!Files.exists(Paths.get(apps))) return null
            return Files.list(Paths.get(apps))
                    .filter({ _ -> _.getFileName().startsWith("IDEA-C") || _.getFileName().startsWith("IDEA-U") })
                    .map({ _ -> _.resolve("ch-0") }).filter({ f -> f != null && Files.isDirectory(f) })
                    .flatMap({ f -> Files.list(f) }).filter({ _ -> _.fileName.toString().matches("\\d+\\.\\d+\\.\\d+") })
                    .sorted({ a, b -> b.fileName <=> a.fileName }).findFirst().orElseGet({ _ -> null })
        }
    } catch (Exception ignored) { // this is so java, I dont like it :(
        ignored.printStackTrace(System.out)
        return null
    }
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    def localDist = findIntellijPath()
    if (!System.getenv("CI")?.trim() && localDist != null) {
        localPath localDist.toString()
    } else {
        version "IU-2021.2"
    }
}

sourceSets.main.scala.srcDirs = ['src/main/gen', 'src/main/scala']

import org.jetbrains.grammarkit.tasks.*

import java.nio.file.Files
import java.nio.file.Paths

task generatePrologLexer(type: GenerateLexer) {
    source = "src/main/lang/prologLexer.flex"

    targetDir = "src/main/gen/tech/phosphorus/intellij/prolog"

    targetClass = "PrologLexer"

    purgeOldFiles = true
}

task generatePrologParser(type: GenerateParser) {
    // source bnf file
    source = "src/main/lang/prolog.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = 'src/main/gen'

    // path to a parser file, relative to the targetRoot
    pathToParser = 'tech/phosphorus/intellij/prolog/psi/PrologParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = 'tech/phosphorus/intellij/prolog/psi/'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

task "generateDirs" {
    sourceSets*.scala.srcDirs*.each {
        it.mkdirs()
    }
}

patchPluginXml {
    changeNotes """<ul>
        <li>patch for version compatibility</li>
    </ul>"""
}
