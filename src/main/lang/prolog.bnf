{
  parserClass="tech.phosphorus.intellij.prolog.psi.PrologParser"
  parserUtilClass="tech.phosphorus.intellij.prolog.psi.PrologParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Prolog"
  psiImplClassSuffix="Impl"
  psiPackage="tech.phosphorus.intellij.prolog.psi"
  psiImplPackage="tech.phosphorus.intellij.prolog.psi.impl"

  elementTypeHolderClass="tech.phosphorus.intellij.prolog.psi.PrologTypes"
  elementTypeClass="tech.phosphorus.intellij.prolog.psi.PrologElementType"
  elementTypeFactory="tech.phosphorus.intellij.prolog.psi.PrologElementType.createType"
  tokenTypeClass="tech.phosphorus.intellij.prolog.psi.PrologTokenType"

  psiImplUtilClass="tech.phosphorus.intellij.prolog.psi.impl.SimplePsiImplUtil"

  tokens=[
      SEMI=';'
      COMMA=','
      DOT='.'
      UNIFY=':-'
      EXPAND='-->'
      NOT='/-'
      LP='('
      RP=')'
      LB='['
      RB=']'
      LBR='{'
      RBR='}'
      LIST_CONS='|'
      WILDCARD='_'
      ARITH_EVAL='is'
      RUNTIME_EVALUATION='=..'

      space='regexp:\s+'
      comment='regexp:(%.*)'
      block_comment='regexp:/\*(.|\n)*\*/'
      integer='regexp:\d+'
      float='regexp:\d+(\.d+)?([Ee]\d+)?' // strict floating mode
      const_id='regexp:\p{Lower}(\p{Alnum}|_|-|:)*'
      atom_id='regexp:((\p{Upper}|_)(\p{Alnum}|_)*)'
      operator_id='regexp:[<=>:!+\\\-*/]+' // considering that operators in prolog can fly everywhere...
      string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    ]
}

root ::= rule*
private rule ::= !<<eof>> (toplevel_expr | trailing_expr) '.'

toplevel_expr ::= (expr_head ((':-' | '-->') expr_body)?) {
implements=['com.intellij.psi.PsiNameIdentifierOwner']
mixin='tech.phosphorus.intellij.prolog.psi.PrologTopLevelDeclarationMixin'
}

trailing_expr ::= ':-' expr_body

expr_head ::= predicate

expr_body ::= primary

predicate ::= predicate_id parameter_list?

common_predicate ::= ref_predicate_id parameter_list?

predicate_id ::= const_id {
implements=['com.intellij.psi.PsiNameIdentifierOwner']
stubClass='tech.phosphorus.intellij.prolog.toolchain.PrologPredicateStub'
mixin='tech.phosphorus.intellij.prolog.psi.PrologDeclarationMixin'
}

ref_predicate_id ::= const_id {
mixin='tech.phosphorus.intellij.prolog.psi.PrologPredicateReferenceMixin'
}

parameter_list ::= '(' primary? ')' {
mixin='tech.phosphorus.intellij.prolog.psi.PrologParameterListMixin'
}

logical_or ::= ';' primary

logical_and ::= ',' primary

logical_not ::= '/-' primary

arithmetic_eval ::= 'is' primary

runtime_eval ::= '=..' primary

equiv_binary ::= ( logical_not | logical_and | arithmetic_eval | runtime_eval )

literal ::= string | integer | float

list_constructor ::= '[' ']' | '[' primary '|' primary ']' | '[' primary ']'

common_val ::= common_predicate | ident | literal | list_constructor | '_'

private common_val_or_paren ::= common_val | '(' primary ')' | '{' primary '}'

private primary ::= (common_val_or_paren | logical_not | operator_id) (common_val_or_paren | equiv_binary | logical_or  | operator_id)*

ident ::= (const_id | atom_id) {
mixin='tech.phosphorus.intellij.prolog.psi.PrologAtomReferenceMixin'
}
