/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tech.phosphorus.intellij.prolog;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tech.phosphorus.intellij.prolog.psi.PrologTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>prologLexer.flex</tt>
 */
public class PrologLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16656 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\10\21\1\74\2\21\1\75\1\76\7\21\123\26\1"+
    "\77\7\26\1\100\1\101\12\26\1\102\24\21\1\26\1\103\u0702\21");

  /* The ZZ_CMAP_Y table has 4352 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\7\1\21\1\22\2\23\1\24\1\23\7\25\2\26\1\27\5\25\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\26\1\43\2\25\1\44\7\25\1\45"+
    "\1\46\1\47\1\25\10\23\1\50\4\23\1\51\1\52\1\53\1\54\1\0\1\55\1\56\12\0\1\57"+
    "\5\0\1\60\1\61\1\62\1\63\1\64\1\7\1\65\1\66\3\23\1\67\1\70\3\25\1\71\1\72"+
    "\6\7\6\23\4\25\1\73\1\74\6\25\1\75\1\76\14\25\1\77\3\7\1\21\1\100\1\101\4"+
    "\23\11\0\3\53\2\102\5\0\5\53\1\102\2\0\1\53\1\103\1\104\13\53\1\105\1\0\1"+
    "\106\1\107\1\53\1\110\2\0\1\111\3\53\3\0\1\112\12\53\1\113\1\0\1\100\1\0\5"+
    "\53\1\102\1\114\1\115\2\53\1\113\1\115\1\116\1\117\2\0\3\53\1\117\10\0\2\53"+
    "\1\120\1\113\10\0\1\121\6\53\1\122\2\0\1\117\1\53\1\103\1\53\1\104\1\53\1"+
    "\123\1\110\1\124\2\53\1\111\1\125\1\122\1\0\1\126\1\0\1\127\1\103\1\53\1\54"+
    "\1\0\1\112\1\130\1\124\2\53\1\111\1\131\1\54\3\0\1\132\1\107\1\53\1\133\1"+
    "\0\1\112\1\134\1\135\2\53\1\111\1\136\1\122\2\0\1\117\1\0\1\103\1\53\1\0\1"+
    "\100\1\112\1\110\1\124\2\53\1\111\1\136\1\122\3\0\1\127\1\103\1\53\1\100\1"+
    "\0\1\137\1\140\1\141\1\142\1\143\1\140\1\53\1\54\2\0\1\117\1\0\1\107\1\53"+
    "\2\0\1\112\1\120\1\111\2\53\1\111\1\53\1\122\3\0\1\102\1\103\1\53\2\0\1\123"+
    "\1\120\1\111\2\53\1\111\1\144\1\122\3\0\1\126\1\103\1\53\1\145\1\0\1\112\1"+
    "\120\1\111\4\53\1\146\1\0\1\126\1\147\1\150\1\103\1\53\1\0\1\151\1\112\1\53"+
    "\1\152\1\151\2\53\1\135\1\105\1\152\3\0\1\107\1\53\2\0\1\104\5\53\1\153\1"+
    "\0\1\152\1\0\1\53\1\54\4\0\1\154\1\155\1\121\1\104\1\156\1\157\1\153\1\160"+
    "\1\161\1\0\1\53\1\162\4\0\1\117\3\0\1\53\1\54\2\0\1\53\1\104\3\53\1\163\3"+
    "\0\1\163\16\0\5\53\1\102\1\0\1\150\1\53\1\54\1\113\1\164\1\165\1\107\1\123"+
    "\1\53\1\54\1\126\1\53\1\54\4\7\1\166\1\167\5\53\1\170\51\53\1\141\1\152\1"+
    "\141\5\53\1\141\4\53\1\141\1\152\1\141\1\53\1\152\7\53\1\141\10\53\1\102\4"+
    "\0\2\53\2\0\12\7\1\171\1\172\1\104\114\53\1\110\2\53\1\173\2\53\1\102\11\53"+
    "\1\102\1\104\1\117\1\53\1\120\1\54\1\0\2\53\1\54\1\0\2\53\1\54\1\0\1\53\1"+
    "\120\1\117\1\0\6\53\1\174\3\0\1\150\1\116\1\53\1\54\4\0\1\53\1\54\13\53\1"+
    "\0\1\110\4\53\1\175\10\53\1\113\1\0\3\53\1\152\4\0\1\107\4\53\1\113\1\163"+
    "\1\0\5\53\1\174\3\53\1\54\1\53\1\54\4\0\2\53\1\152\1\0\6\53\1\163\5\0\1\53"+
    "\1\54\1\53\1\54\1\150\13\0\1\112\5\53\1\174\1\0\1\112\1\174\1\53\1\54\4\0"+
    "\1\176\3\53\1\117\1\107\6\53\1\113\3\0\4\53\1\174\3\0\1\53\1\177\5\53\1\113"+
    "\1\23\1\200\13\0\1\201\1\202\1\0\30\23\10\0\22\25\1\203\1\204\14\25\1\23\1"+
    "\7\1\172\1\171\1\23\1\7\1\23\1\7\1\172\1\171\1\23\1\205\1\23\1\7\1\23\1\172"+
    "\1\23\1\53\1\23\1\53\1\23\1\53\1\206\1\207\1\210\1\211\1\212\1\213\1\23\1"+
    "\214\1\210\1\211\1\215\1\216\3\0\1\217\5\0\1\220\2\0\1\221\1\222\2\0\1\23"+
    "\1\55\14\0\1\223\1\224\1\225\1\226\1\227\1\230\1\231\1\232\1\233\1\234\2\0"+
    "\2\235\2\236\1\237\145\0\1\240\3\235\3\236\1\241\42\0\5\7\1\21\5\23\1\24\1"+
    "\242\1\243\1\244\1\245\14\25\1\246\1\247\1\250\1\0\4\23\1\251\1\20\7\53\1"+
    "\150\2\0\2\53\1\152\1\0\10\152\11\0\1\150\72\0\1\252\5\0\1\253\1\143\1\104"+
    "\11\53\1\152\1\112\1\104\12\53\1\170\1\112\4\53\1\113\1\104\12\53\1\152\2"+
    "\0\3\53\1\102\6\0\170\53\1\113\11\0\72\53\1\113\5\0\21\53\1\163\10\0\5\53"+
    "\1\113\41\53\1\163\3\53\1\174\2\0\5\25\1\254\1\0\1\150\3\25\1\255\10\53\1"+
    "\113\5\0\1\150\1\53\1\74\1\25\1\27\7\25\1\23\1\256\1\25\1\257\1\260\2\25\1"+
    "\261\1\262\7\0\1\150\1\263\1\264\1\170\2\53\1\102\3\0\6\53\1\174\1\0\1\151"+
    "\5\53\1\174\3\0\1\53\1\54\2\0\1\151\1\265\4\53\1\113\1\0\2\53\1\152\3\0\3"+
    "\53\1\163\1\121\5\53\1\102\2\0\1\150\1\53\1\54\1\120\2\53\1\152\5\53\1\117"+
    "\2\0\1\170\1\174\1\53\1\54\2\53\1\152\1\266\6\53\1\165\1\253\1\175\2\0\1\267"+
    "\1\53\1\102\1\133\1\0\3\270\1\0\2\152\5\23\1\271\1\172\1\0\12\23\4\53\1\102"+
    "\1\0\1\53\1\54\64\53\1\174\1\0\2\53\1\152\1\176\5\53\1\174\40\0\55\53\1\113"+
    "\15\53\1\54\4\0\1\24\1\0\1\272\1\273\1\53\1\111\1\152\1\161\1\274\15\53\1"+
    "\54\3\0\1\176\54\53\1\113\2\0\10\53\1\151\6\53\5\0\1\53\1\174\16\0\1\120\20"+
    "\53\1\163\2\0\1\53\1\54\1\77\2\7\1\275\1\101\2\23\1\276\1\107\12\53\1\152"+
    "\3\151\1\133\4\0\1\53\1\144\2\53\1\152\2\53\1\277\1\53\1\113\1\53\1\113\4"+
    "\0\17\53\1\102\60\0\3\53\1\163\6\53\1\117\5\0\4\53\2\0\2\53\1\111\1\54\4\53"+
    "\1\113\1\0\3\53\1\113\4\53\1\174\1\53\6\0\5\7\5\23\11\53\1\113\1\53\1\54\4"+
    "\7\1\213\4\23\1\300\5\53\1\0\6\53\1\174\23\0\46\53\1\152\1\0\2\53\1\113\1"+
    "\0\1\53\23\0\1\113\1\111\4\53\1\134\1\301\2\53\1\113\1\0\2\53\1\152\1\0\3"+
    "\53\1\152\10\0\2\53\1\302\1\0\2\53\1\113\1\0\3\53\1\54\10\0\7\53\1\107\10"+
    "\0\1\117\1\0\1\144\1\104\2\53\1\174\5\0\3\53\1\163\3\53\1\163\4\0\1\53\1\104"+
    "\2\53\1\163\3\0\6\53\1\113\1\0\2\53\1\113\1\0\2\53\1\102\1\0\2\53\1\54\15"+
    "\0\11\53\1\117\6\0\6\7\1\275\1\0\6\23\1\276\41\0\1\176\6\53\5\0\1\107\1\53"+
    "\2\0\1\176\5\53\4\0\3\53\1\117\1\53\1\54\1\176\3\53\1\152\1\0\1\107\1\53\2"+
    "\0\4\53\1\303\1\0\1\176\5\53\1\102\1\0\1\304\1\0\1\53\1\305\4\0\2\53\1\135"+
    "\2\53\1\174\12\0\1\152\1\306\1\53\1\134\1\53\1\117\5\53\1\152\2\0\1\53\1\54"+
    "\1\112\1\110\1\124\2\53\1\111\1\136\1\122\2\0\1\117\1\112\1\54\23\0\6\53\1"+
    "\163\1\0\1\150\1\102\1\53\1\54\4\0\6\53\2\0\1\127\1\0\1\53\1\54\24\0\5\53"+
    "\1\152\5\0\1\174\4\0\6\53\2\0\1\116\1\0\1\53\1\54\4\0\5\53\1\102\2\0\1\53"+
    "\1\54\6\0\3\53\1\54\2\0\1\53\1\54\54\0\4\7\4\23\1\53\1\54\1\0\1\150\70\0\7"+
    "\53\1\117\40\0\1\53\1\111\3\53\1\152\2\0\1\117\1\0\1\53\1\54\2\0\1\151\3\53"+
    "\56\0\63\53\1\54\34\0\30\53\1\174\27\0\5\53\1\152\72\0\10\53\1\152\67\0\7"+
    "\53\1\117\3\53\1\152\1\53\1\54\14\0\3\53\1\113\2\0\6\53\2\0\1\174\1\0\1\53"+
    "\1\54\1\176\2\53\1\112\2\53\56\0\10\53\1\163\1\0\1\117\7\0\1\176\1\53\10\0"+
    "\1\117\3\0\75\53\1\163\2\0\36\53\1\102\41\0\1\54\77\0\15\53\1\102\1\53\1\163"+
    "\1\53\1\117\1\53\1\54\54\0\3\7\1\307\2\23\1\310\2\7\1\311\1\206\2\23\3\7\1"+
    "\307\2\23\1\312\1\313\1\314\1\311\1\315\1\316\1\23\3\7\1\307\2\23\1\317\1"+
    "\320\1\321\1\322\3\23\1\323\1\324\1\325\1\326\2\23\1\310\2\7\1\311\3\23\3"+
    "\7\1\307\2\23\1\310\2\7\1\311\3\23\3\7\1\307\2\23\1\310\2\7\1\311\3\23\3\7"+
    "\1\307\2\23\1\172\3\7\1\326\2\23\1\271\1\327\2\7\1\330\2\23\1\206\1\310\2"+
    "\7\1\322\2\23\1\24\1\245\2\7\1\21\3\23\1\331\3\7\1\326\2\23\1\271\1\332\36"+
    "\53\1\163\7\0\4\7\1\307\3\23\1\300\1\0\1\53\1\54\24\0\1\144\3\53\1\154\1\104"+
    "\1\170\1\333\1\334\1\335\1\154\1\336\1\154\2\170\1\132\1\53\1\135\1\53\1\174"+
    "\1\337\1\135\1\53\1\174\116\0\3\235\1\340\3\235\1\340\3\235\1\340\16\0\32"+
    "\53\1\152\5\0\106\53\1\163\1\0\33\53\1\113\120\53\1\54\53\0\3\53\1\113\74"+
    "\0");

  /* The ZZ_CMAP_A table has 1800 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\2\0\1\2\1\23\1\26\2\0\1\3\1\0\1\24\1\33\1\34\1\5\1\23\1\30\1"+
    "\17\1\7\1\4\12\6\1\20\1\27\1\23\1\32\1\31\2\0\4\22\1\11\15\22\1\35\1\25\1"+
    "\36\1\0\1\16\1\0\3\15\1\10\1\13\3\15\1\42\11\15\1\43\7\15\1\37\1\41\1\40\7"+
    "\0\1\1\2\0\1\2\11\0\1\15\12\0\1\15\2\0\7\22\1\0\7\22\20\15\1\0\1\22\1\15\1"+
    "\22\1\15\1\22\1\15\1\22\2\15\1\22\1\15\1\22\1\15\1\22\1\15\1\22\2\15\1\22"+
    "\1\15\1\22\1\15\1\22\1\15\2\22\1\15\1\22\1\15\1\22\3\15\2\22\1\15\1\22\1\15"+
    "\2\22\1\15\3\22\2\15\4\22\1\15\2\22\1\15\3\22\3\15\2\22\1\15\2\22\1\15\1\22"+
    "\1\15\1\22\1\15\2\22\1\15\1\22\2\15\1\22\1\15\2\22\1\15\3\22\1\15\1\22\1\15"+
    "\2\22\2\15\1\14\1\22\3\15\4\14\1\22\1\14\1\15\1\22\1\14\1\15\1\22\1\14\1\15"+
    "\1\22\1\15\1\22\1\15\1\22\1\15\1\22\2\15\1\22\2\15\1\22\1\14\1\15\1\22\1\15"+
    "\3\22\1\15\1\22\7\15\2\22\1\15\2\22\2\15\1\22\1\15\4\22\5\15\1\14\4\15\7\14"+
    "\2\15\4\0\14\14\6\0\5\15\7\0\1\14\1\0\1\14\6\0\1\12\2\0\1\22\1\15\1\22\1\15"+
    "\1\14\1\0\1\22\1\15\2\0\4\15\1\0\1\22\6\0\1\22\1\0\3\22\1\0\1\22\1\0\2\22"+
    "\1\15\11\22\1\0\11\22\13\15\1\22\2\15\3\22\7\15\1\22\1\15\1\0\1\22\1\15\2"+
    "\22\2\15\4\22\1\15\10\0\1\22\1\15\1\22\1\15\1\22\1\15\2\22\1\15\1\22\1\15"+
    "\1\22\1\15\1\22\1\15\1\22\1\15\1\22\1\15\1\22\2\15\1\0\7\22\1\0\1\14\7\0\7"+
    "\15\3\14\5\0\2\14\4\0\2\14\1\0\13\14\1\0\1\14\7\0\2\14\7\0\7\14\2\0\2\14\1"+
    "\0\6\14\5\0\11\14\6\0\2\14\4\0\1\14\11\0\1\14\3\0\1\14\7\0\5\14\1\0\2\14\4"+
    "\0\6\14\3\0\1\14\2\0\1\14\4\0\4\14\2\0\6\14\1\0\1\14\3\0\2\14\6\0\1\14\5\0"+
    "\2\14\1\0\4\14\4\0\2\14\1\0\2\14\1\0\2\14\2\0\4\14\1\0\1\14\3\0\3\14\3\0\6"+
    "\14\1\0\3\14\1\0\6\14\1\0\2\14\1\0\3\14\3\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14"+
    "\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\4\14\1\0\3\14\1\0\2\14\5\0\3\14\2"+
    "\0\1\14\6\0\3\14\10\0\1\14\2\0\15\14\1\0\1\14\1\0\2\14\5\0\2\14\1\0\1\14\2"+
    "\0\2\14\1\0\1\14\2\0\1\14\3\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\3\14\5\0"+
    "\1\14\2\0\5\14\1\0\1\14\1\0\2\14\2\0\11\14\5\0\4\14\3\0\1\14\3\0\2\14\1\0"+
    "\6\22\1\0\1\22\5\0\1\22\2\0\3\14\1\0\4\14\6\22\2\0\6\15\2\0\1\2\13\14\4\0"+
    "\1\14\1\0\1\14\10\0\7\14\3\0\3\14\1\15\10\0\4\14\1\0\4\14\3\0\2\14\1\0\1\22"+
    "\1\15\1\22\1\15\1\22\11\15\1\22\1\15\1\0\1\22\1\0\1\22\1\0\1\22\1\0\1\22\5"+
    "\15\1\0\2\15\4\22\1\14\1\0\1\15\3\0\3\15\1\0\2\15\4\22\1\14\3\0\4\15\2\0\2"+
    "\15\4\22\4\0\5\22\3\0\13\2\5\0\2\1\5\0\1\2\7\0\1\2\1\0\1\15\15\0\1\15\2\0"+
    "\1\22\4\0\1\22\2\0\1\15\3\22\2\15\3\22\1\15\1\0\1\22\3\0\5\22\6\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\4\22\1\0\1\15\4\22\1\15\4\14\1\15\2\0\2\15\2\22\5\0\1\22"+
    "\4\15\4\0\1\15\1\0\10\21\10\12\3\0\1\22\1\15\11\0\2\21\2\12\6\0\1\22\1\15"+
    "\3\22\2\15\1\22\1\15\1\22\1\15\1\22\1\15\4\22\1\15\1\22\2\15\1\22\10\15\3"+
    "\22\1\15\1\22\2\15\6\0\1\22\1\15\1\22\1\15\3\0\1\22\1\15\4\0\6\15\1\0\1\15"+
    "\1\2\4\0\2\14\2\0\5\14\2\0\1\22\1\15\1\22\1\15\1\22\1\15\1\14\1\0\1\22\1\15"+
    "\1\22\3\15\2\0\1\15\1\22\1\15\1\22\1\15\2\22\1\15\1\14\2\0\1\22\1\15\1\22"+
    "\1\15\1\14\1\22\1\15\1\22\3\15\1\22\1\15\1\22\1\15\5\22\1\0\5\22\1\15\1\22"+
    "\4\15\7\14\1\0\3\14\1\0\1\14\3\0\1\14\1\0\1\14\4\0\1\14\3\0\2\14\3\0\3\14"+
    "\3\0\6\14\1\0\3\15\1\0\4\15\3\0\5\15\5\0\1\14\1\0\3\14\1\0\2\14\1\0\2\14\3"+
    "\22\5\0\3\15\5\0\3\14\1\0\2\14\1\0\1\14\4\15\4\0\1\14\3\0\1\14\2\0\4\14\1"+
    "\0\2\14\2\0\3\14\3\0\1\14\2\0\4\14\3\0\3\14\1\0\1\14\3\0\1\14\1\0\4\14\1\0"+
    "\1\14\2\22\12\15\12\22\6\15\1\22\1\0\2\22\2\0\1\22\2\0\2\22\2\0\4\22\1\0\2"+
    "\22\2\15\1\0\1\15\1\0\7\15\1\0\7\15\2\22\1\0\4\22\2\0\10\22\1\0\7\22\1\0\2"+
    "\15\2\22\1\0\4\22\1\0\5\22\1\0\1\22\3\0\7\22\1\0\10\15\11\22\1\0\5\15\1\0"+
    "\10\15\1\22\1\15\2\0\2\14\1\0\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\3\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\3\14\2\21"+
    "\6\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\4\2\1\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\7\3\23"+
    "\1\24\1\25\2\0\1\4\1\26\1\0\1\27\4\0"+
    "\1\30\1\31\1\32\2\33\1\34\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\110\0\u0120\0\u0144\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4"+
    "\0\110\0\110\0\u01f8\0\110\0\110\0\110\0\110\0\110"+
    "\0\110\0\110\0\u021c\0\110\0\u0240\0\u0264\0\330\0\330"+
    "\0\u0288\0\u02ac\0\u02d0\0\330\0\u01b0\0\110\0\u02f4\0\u01d4"+
    "\0\u0318\0\u033c\0\u0120\0\110\0\110\0\u0360\0\u02ac\0\330"+
    "\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\12\1\3\1\12\1\14\1\15\1\16\2\13"+
    "\1\7\1\17\1\7\1\20\1\21\1\22\1\7\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\12\4\34\1\35\1\36\36\34\45\0\2\4\41\0"+
    "\1\5\1\0\42\5\4\0\1\7\1\37\11\0\1\40"+
    "\1\7\2\0\1\7\1\0\1\7\3\0\2\7\15\0"+
    "\2\7\11\0\2\7\2\0\1\7\1\0\1\7\3\0"+
    "\2\7\17\0\1\10\1\41\1\0\1\42\1\0\1\42"+
    "\36\0\1\12\1\0\2\12\1\0\6\12\1\0\1\12"+
    "\17\0\2\12\6\0\1\13\1\0\2\13\1\0\4\13"+
    "\3\0\1\13\17\0\2\13\4\0\2\7\11\0\1\43"+
    "\1\7\2\0\1\7\1\0\1\7\3\0\2\7\15\0"+
    "\2\7\11\0\1\44\1\7\2\0\1\7\1\0\1\7"+
    "\3\0\2\7\11\0\24\45\1\46\1\47\16\45\25\50"+
    "\1\51\1\46\15\50\4\0\2\7\1\0\1\52\7\0"+
    "\2\7\2\0\1\7\1\0\1\7\3\0\2\7\17\0"+
    "\1\12\1\0\2\12\1\0\6\12\1\0\1\12\17\0"+
    "\1\12\1\53\5\0\1\54\42\0\1\55\47\0\1\56"+
    "\41\0\1\57\41\0\2\7\11\0\2\7\2\0\1\7"+
    "\1\0\1\7\3\0\1\60\1\7\11\0\1\45\1\0"+
    "\42\45\1\50\1\0\42\50\7\0\1\61\44\0\1\56"+
    "\1\42\1\0\1\42\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\7\1\2\11\1\1\7\11"+
    "\1\1\1\11\4\1\2\0\2\1\1\0\1\11\4\0"+
    "\1\1\2\11\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public PrologLexer() {
    this((java.io.Reader)null);
  }
    private int blockCommentDepth = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PrologLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              blockCommentDepth = 0; yybegin(YYINITIAL); return BLOCK_COMMENT;
            }  // fall though
            case 50: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 30: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 31: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 32: break;
          case 4: 
            { return OPERATOR_ID;
            } 
            // fall through
          case 33: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 34: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 35: break;
          case 7: 
            { return CONST_ID;
            } 
            // fall through
          case 36: break;
          case 8: 
            { return ATOM_ID;
            } 
            // fall through
          case 37: break;
          case 9: 
            { return WILDCARD;
            } 
            // fall through
          case 38: break;
          case 10: 
            { return SEMI;
            } 
            // fall through
          case 39: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 40: break;
          case 12: 
            { return LP;
            } 
            // fall through
          case 41: break;
          case 13: 
            { return RP;
            } 
            // fall through
          case 42: break;
          case 14: 
            { return LB;
            } 
            // fall through
          case 43: break;
          case 15: 
            { return RB;
            } 
            // fall through
          case 44: break;
          case 16: 
            { return LBR;
            } 
            // fall through
          case 45: break;
          case 17: 
            { return RBR;
            } 
            // fall through
          case 46: break;
          case 18: 
            { return LIST_CONS;
            } 
            // fall through
          case 47: break;
          case 19: 
            { 
            } 
            // fall through
          case 48: break;
          case 20: 
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            } 
            // fall through
          case 49: break;
          case 21: 
            { return NOT;
            } 
            // fall through
          case 50: break;
          case 22: 
            { return UNIFY;
            } 
            // fall through
          case 51: break;
          case 23: 
            { return STRING;
            } 
            // fall through
          case 52: break;
          case 24: 
            { return ARITH_EVAL;
            } 
            // fall through
          case 53: break;
          case 25: 
            { blockCommentDepth ++;
            } 
            // fall through
          case 54: break;
          case 26: 
            { if(-- blockCommentDepth <= 0) { yybegin(YYINITIAL); return BLOCK_COMMENT; }
            } 
            // fall through
          case 55: break;
          case 27: 
            { return FLOAT;
            } 
            // fall through
          case 56: break;
          case 28: 
            { return EXPAND;
            } 
            // fall through
          case 57: break;
          case 29: 
            { return RUNTIME_EVALUATION;
            } 
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
